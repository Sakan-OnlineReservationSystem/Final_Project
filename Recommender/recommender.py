# -*- coding: utf-8 -*-
"""Recommender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pxUz9ZR6C1DcPPJtQ9bMNp2wUCG_Jlu1
"""

import pymongo
import numpy as np
import pandas as pd

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics.pairwise import cosine_similarity

def get_data():
    db_client = pymongo.MongoClient('mongodb+srv://ahmedhesham122000:SakanDataBase@sakandatabase.8xx7paz.mongodb.net/?retryWrites=true&w=majority&appName=SakanDatabase')
    print('database connected successfully..')
    sakan_db = db_client['test']
    collection =sakan_db['hotels']
    collection_list =list(collection.find())
    df = pd.DataFrame(collection_list)
    print('Data was collected successfully...')
    return df, collection

def process_data(df):
    df_recommender = df[['_id', 'type', 'city', 'country', 'cheapestPrice', 'numberOfStars', 'score']]

    df_recommender = df_recommender.fillna(method='ffill')
    df_recommender.numberOfStars= df_recommender.numberOfStars.astype(int)

    type_encoder = LabelEncoder()
    df_recommender['type'] = type_encoder.fit_transform(df_recommender['type'])

    city_encoder = LabelEncoder()
    df_recommender['city'] = city_encoder.fit_transform(df_recommender['city'])

    country_encoder = LabelEncoder()
    df_recommender['country'] = country_encoder.fit_transform(df_recommender['country'])

    print('df Recommender: ')
    print(df_recommender.head())
    return df_recommender

def calculate_similarity(df):
  similarity_mat = cosine_similarity(df.drop(columns=['_id']))
  return similarity_mat

def update_database(df, similarity_matrix, collection):
  top_10_indices = np.argsort(similarity_matrix, axis=1)[:, -11:]
  for i in range(top_10_indices.shape[0]):
    recommendation = list(df['_id'].iloc[top_10_indices[i]])
    if df['_id'].iloc[i] in recommendation:
      recommendation.remove(df['_id'].iloc[i])
    collection.update_one({"_id":df['_id'].iloc[i]},{"$set":{"recommendation":recommendation}})

def recommend():
    df, collection = get_data()
    df_recommender = process_data(df)
    similarity_matrix = calculate_similarity(df_recommender)
    update_database(df_recommender, similarity_matrix, collection)


if '__name__' == '__main__':
  recommend()

